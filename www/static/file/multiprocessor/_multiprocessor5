#The Relative Power of Primitive Synchronization Operations
>written by Xingang Wang in Jan/2018

quoted from `<The Art of Multiprocessor Programming>`

> each class in the hierarchy has an associated consensus number, which is the maximum number of threads for which objects of the class can solve an elementary synchronization problem called consensus.

>in a system of n or more concurrent threads, it is impossible to construct a wait-free or lock-free implementation of an object with consensus number n from an object with a lower consensus number

## Consensus Numbers
* Consistent
  + all threads decide the same value
* Valid
  + the common decision value is some thread's input
  + no trivial decision

```java
public interface Consensus<T> {
    T decide(T value);
}
```
>A class C solves n-thread consensus if there exist a consensus protocol using any number of objects of class C and any number of atomic registers

>The consensus number of a class C is the largest n for which that class solves n-thread consensus. If no largest n exists, we say the consensus number of the class is infinite.

>Suppose one can implement an object of class C from one or more objects of class D, together with some number of atomic registers. If class C solves n-consensus, then so does class D

### binary consensus
>Sometimes it is useful to focus on consensus problems where all inputs are either zero or one

### States and Valence
* Every 2-thread consensus protocol has a bivalent initial state.
>Proof: \
1.consider the initial state (A has input 0) & (B has input 1) \
2.if A finishes the protocol before B takes a step, A decide 0 \
3.symmetrically, if B finishes the protocol before A takes a step, B decide 1

* Every n-thread consensus protocol has a bivalent initial state.

* A protocol state is critical if:
  + it is bivalent
  + if any thread moves, the protocol state becomes univalent
* Every wait-free consensus protocol has a critical state.
>Proof: \
1.suppose not. the protocol has a bivalent initial state, start in this state \
2.let the thread that can move without making the protocol state univalent move \
3.if the protocol runs forever, then it is not wait-free \
4.and so the protocol will eventually enters a state where no such move is possible, is just a critical state

## Atomic Registers
>Atomic registers have consensus number 1.

>It is impossible to construct a wait-free implementation of any object with consensus number greater than 1 using atomic registers.

## FIFO Queues
>The two-dequeuer FIFO queue class has consensus number at least 2

#### 2-thread consensus using a FIFO queue:
* decide() calls propose(v) stores v in proposed[]
* dequeue() an item, if it is WIN, then the calling thread was first, decide on its own value
* if the item is LOSE, then other thread was first, decide on other thread's value
```java
public class QueueConsensus<T> extends ConsensusProtocol<T> {
  private static final int WIN = 0; // first thread
  private static final int LOSE = 1; // second thread
  Queue queue;
  // initialize queue with two items
  public QueueConsensus() {
    queue = new Queue();
    queue.enq(WIN);
    queue.enq(LOSE);
  }
  // figure out which thread was first
  public T decide(T Value) {
    propose(value);
    int status = queue.deq();
    int i = ThreadID.get();
    if (status == WIN)
    return proposed[i];
    else
    return proposed[1-i];
  }
}
```
* the protocol is wait-free
>if each thread returns its own input, they must have both dequeued WIN, violating FIFO, vice versa.
* validity condition
>the thread that dequeued WIN stored its input in the proposed[] array before any value was dequeued

more:
>Trivial variations of this program yield protocols for stacks, priority queues, lists, sets, or any object with methods that return different results if applied in
different orders.

### corollary
>It is impossible to construct a wait-free implementation of a queue, stack, priority queue, set, or list from a set of atomic registers.

### theorem
>FIFO queues have consensus number 2.

more
>Trivial variations of this argument can be applied to show that many similar data types, such as sets, stacks, double-ended queues, and priority queues, all have consensus number exactly two.

## Multiple Assignment Objects
atomic registers
* single write / multi read OK
* multi write / multi read impossible
>Proof: \
1.if can write to 2/3 array elements \
2.we can solve 2-consensus, impossible with atomic registers

snapshots consensus
>Because snapshots
can be implemented from read–write registers, Theorem 5.2.1 implies shapshot objects have consensus number 1.

#### theorem
>There is no wait-free implementation of an (m, n)-assignment object by atomic registers for any n > m > 1

####  A lock-based implementation of a (2,3)-assignment object.
```java
public class Assign23 {
    int[] r = new int[3];
    public Assign23(int init) {
        for(int i=0; i<r.length; i++)
            r[i] = init;
    }
    public synchronized void assign(T v0, T v1, int i0, int i1) {
        r[i0] = v0;
        r[i1] = v1;
    }
    public synchronized int read(int i) {
        return r[i];
    }
}
```
>Proof: A write v0 and v1, B write v1 and v2\
1.if A's assignment was ordered first, and B's has not happen, then the r is [A A null], so A decide its own input \
2.if A's assignment and then B's assignment, the r is [A B B], A decide its own input \
3.if B's assignment and then A's assignment, the r is [A A B], A decide B's input \
4.vice versa for B

#### theorem
>Atomic (n, n(n+1)/2)-register assignment for n > 1 has consensus number at least n.

#### 2-thread consensus using (2,3)-multiple assignment.
```java
public class MultiConsensus<T> extends ConsensusProtocol<T> {
    private final int NULL = -1;
    Assign23 assign23 = new Assign23(NULL);

    @Override
    public T decide(T value) {
        proposed(value);
        int i= ThreadID.get();
        int j = 1-i;
        // double assignment
        assign23.assign(i, i, i, i+1);
        int other = assign23.read((i+2)%3);
        if (other == NULL || other == assign23.read(1))
            return proposed[i];
        else
            return proposed[j];
    }
}
```

## Read–Modify–Write Operations
>A method is an RMW for the function set F if it atomically replaces the current register value v with f(v), for some f ∈ F, and returns the original value v.

### AtomicInteger
>java.util.concurrent \
>The RMW methods are interesting precisely because they are potential hardware primitives, engraved not in stone, but in silicon
* getAndSet(v)
* getAndIncrement()
* getAndAdd(k)
* compareAndSet()
* get()

#### theorem
>Any nontrivial RMW register has consensus number at least 2.

### Common2 RMW
* getAndSet()
  + uses a constant function, which overwrites any prior value
* getAndIncrement()
* getAndAdd()
  + use functions that commute with one another.
* ...
#### theorem
>Any RMW register in Common2 has consensus number (exactly) 2.

## compareAndSet()
>called CMPXCHG on the Intel PentiumTM
#### theorem
>A register providing compareAndSet() and get() methods has an __infinite__ consensus number.
####Consensus using compareAndSwap()
```java
public class CASConsensus extends ConsensusProtocol{
    private final int FIRST = -1;
    private AtomicInteger r = new AtomicInteger(FIRST);

    @Override
    public Object decide(Object value) {
        propose(value);
        int i = ThreadID.get();
        if (r.compareAndSet(FIRST, i)) // I won
            return proposed[i];
        else                            // I lost
            return proposed[r.get()];
    }
}
```
####corollary
>A register providing only compareAndSet() has an infinite consensus number.
